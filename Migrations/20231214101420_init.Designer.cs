// <auto-generated />
using System;
using InsuranceTest.Models.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InsuranceTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231214101420_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InsuranceTest.Models.Entities.CompensationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Author")
                        .HasColumnType("int");

                    b.Property<float?>("DentalFund")
                        .HasColumnType("real");

                    b.Property<float>("Fund")
                        .HasColumnType("real");

                    b.Property<float?>("HospitalizationFund")
                        .HasColumnType("real");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastChangeUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisterUser")
                        .HasColumnType("int");

                    b.Property<float?>("SurgeryFund")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CompensationRequest");
                });

            modelBuilder.Entity("InsuranceTest.Models.Entities.InsuranceCover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Author")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastChangeUser")
                        .HasColumnType("int");

                    b.Property<int>("MaxFund")
                        .HasColumnType("int");

                    b.Property<int>("MinFund")
                        .HasColumnType("int");

                    b.Property<float>("RatePrecentage")
                        .HasColumnType("real");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RegisterUser")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Visable")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("InsuranceCover");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = 1,
                            LastChangeDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(205),
                            LastChangeUser = 1,
                            MaxFund = 500000000,
                            MinFund = 5000,
                            RatePrecentage = 0.0052f,
                            RegisterDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(222),
                            RegisterUser = 1,
                            Title = "پوشش جراحی",
                            Visable = true
                        },
                        new
                        {
                            Id = 2,
                            Author = 1,
                            LastChangeDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(278),
                            LastChangeUser = 1,
                            MaxFund = 400000000,
                            MinFund = 4000,
                            RatePrecentage = 0.0042f,
                            RegisterDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(281),
                            RegisterUser = 1,
                            Title = "پوشش دندانپزشکی",
                            Visable = true
                        },
                        new
                        {
                            Id = 3,
                            Author = 1,
                            LastChangeDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(306),
                            LastChangeUser = 1,
                            MaxFund = 200000000,
                            MinFund = 2000,
                            RatePrecentage = 0.005f,
                            RegisterDate = new DateTime(2023, 12, 14, 13, 44, 19, 924, DateTimeKind.Local).AddTicks(308),
                            RegisterUser = 1,
                            Title = "پوشش بستری",
                            Visable = true
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
